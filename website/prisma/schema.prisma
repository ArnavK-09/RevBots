// Base Prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// Models
model User {
  id            String   @id @default(uuid()) @db.Uuid
  username      String
  discriminator String
  identifier    String   @unique
  avatar        String   @default("/logo.png")
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  bots          Bot[]
  vote_timers   Vote[]
}

model Bot {
  id               Int       @id @default(autoincrement())
  owner            User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId          String    @db.Uuid
  avatar           String
  votes            Int       @default(0)
  description      String
  shortDescription String?
  tags             Tag[]
  website          String?
  support          String?
  github           String
  invite           String
  username         String
  identifier       String    @unique
  discriminator    String
  publishedOn      DateTime  @default(now())
  prefix           String
  status           BotStatus @default(PENDING)
  promoted         Boolean   @default(false)
  active_votes     Vote[]
}

model Request {
  code   String  @id @unique @default("CODE")
  status Boolean @default(false)
  user   String  @unique
}

model Vote {
  voter           User     @relation(fields: [voterIdentifier], references: [identifier], onDelete: Cascade)
  voterIdentifier String
  bot             Bot      @relation(fields: [botIdentifier], references: [identifier], onDelete: Cascade)
  botIdentifier   String
  key             String   @unique @default(uuid()) @db.Uuid
  time            DateTime @default(now())

  @@unique([botIdentifier, voterIdentifier])
}

// Enums
enum Tag {
  ANIME
  FUN
  MUSIC
  MULTIPURPOSE
  MODERATION
  LOGGING
  NSFW
  AI
  RANKS
  GIVEAWAYS
}

enum BotStatus {
  ACTIVE
  SHADOW_BANNED
  DEPRECATED
  PENDING
}
